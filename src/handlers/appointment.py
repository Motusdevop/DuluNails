import datetime

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery

import keyboards
from forms.approintment_forms import MakeApprointmentForm

from aiogram.enums import ParseMode

from repository import WindowRepository, UserRepository
from handlers.base import check_register

from config import settings

router = Router()

@router.message(F.text.lower() == '–∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—É üíÖ')
async def appointment(message: Message, state: FSMContext):
    if await check_register(message, state):
        user = UserRepository.get_user(message.from_user.id)
        if not user.is_banned:
            windows = WindowRepository.get_all_no_active_windows()

            if len(windows) == 0:
                await message.answer('–î–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–∫–æ–Ω –Ω–µ—Ç')
                await state.clear()

            else:
                await state.set_state(MakeApprointmentForm.correct_time)
                kb = list()

                for i in range(len(windows)):
                    window = windows[i]
                    kb.append(
                        [InlineKeyboardButton(text=f'{i+1}. {window.datetime_to_str(window.datetime)}',
                                                    callback_data=f'{window.id}')])

                    markup = InlineKeyboardMarkup(inline_keyboard=kb)

                await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –¥–ª—è –≤–∞—Å –¥–∞—Ç—É', reply_markup=markup)
        else:
            await message.answer('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è —Ç–∞–∫ –∫–∞–∫ –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É, –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ: @svessin')

@router.message(F.text.lower() == '–º–æ–∏ –∑–∞–ø–∏—Å–∏ üåøÔ∏èÔ∏èÔ∏èÔ∏èÔ∏èÔ∏è')
async def portfolio(message: Message, state: FSMContext):
    if await check_register(message, state):
        windows = WindowRepository.all_window_per_user(message.from_user.id)
        if len(windows) == 0:
            await message.answer('–£ –≤–∞—Å –Ω–µ—Ç—É –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π')
        else:
            await message.answer('–í–∞—à–∏ –∑–∞–ø–∏—Å–∏:')
            for i in range(len(windows)):
                text = f'''
{i+1}. *{windows[i].datetime_to_str(windows[i].datetime)} –≤ {str(windows[i].correct_time)[:-3]}*
'''
                await message.answer(text, parse_mode=ParseMode.MARKDOWN)
            await message.answer('–î–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏ –∏–ª–∏ –ø–µ—Ä–µ–Ω–æ—Å–∞, –∑–∞ *24 —á–∞—Å–∞* –Ω–∞–ø–∏—à–∏—Ç–µ: @svessin',
                                 parse_mode=ParseMode.MARKDOWN)
@router.callback_query(MakeApprointmentForm.correct_time)
async def correct_time(callback: CallbackQuery, state: FSMContext):
    try:
        window_id = callback.data

        data = {'window_id': window_id, 'active': True, 'user_id': callback.from_user.id}

        window = WindowRepository.get_window(int(window_id))

        await state.update_data(**data)
        await state.set_state(MakeApprointmentForm.window_id)

        await callback.message.delete()

        await callback.message.answer(f'–í–≤–µ–¥–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤–∞–º –≤—Ä–µ–º—è {window.datetime_to_str(window.datetime)} –¥–æ 20:00 –≤ —Ñ–æ—Ä–º–∞—Ç–µ "—á–∞—Å—ã:–º–∏–Ω—É—Ç—ã"')
    except ValueError:
        await state.clear()

@router.message(MakeApprointmentForm.window_id)
async def select_window(message: Message, state: FSMContext):
    try:
        data = await state.get_data()

        window = WindowRepository.get_window(int(data['window_id']))

        msg = message.text.split(':')
        user_time = datetime.time(hour=int(msg[0]), minute=int(msg[1]))
        flag = False

        if window.datetime.hour < user_time.hour < 20:
            flag = True

        elif window.datetime.hour == user_time.hour < 20:
            if window.datetime.minute <= user_time.minute:
                flag = True

        elif window.datetime.hour < user_time.hour == 20:
            if user_time.minute == 0:
                flag = True

        if flag:
            await state.update_data(correct_time=user_time)
            await state.set_state(MakeApprointmentForm.confirmation)
            await message.answer(f'''
*–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ–∫–Ω–æ {window.datetime_to_str(window.datetime)} –≤ {message.text} –≤—ã —É–≤–µ—Ä–µ–Ω—ã?*
–í —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –≤—ã –Ω–µ –ø—Ä–∏–¥—ë—Ç–µ –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—É, —Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É, –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∑–∞–ø–ª–∞—Ç–∏—Ç—å —à—Ç—Ä–∞—Ñ
–î–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–∞—Å—Ç–µ—Ä–æ–º @svessin''',
                                          reply_markup=keyboards.Confirm.markup, parse_mode=ParseMode.MARKDOWN)
        else:
            await message.answer('–í—ã –≤—ã—à–ª–∏ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã –æ–∫–Ω–∞, –∑–∞–ø–∏—à–∏—Ç–µ—Å—å –∑–∞–Ω–æ–≤–æ')
            await state.clear()
    except:
        await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø–∏—à–∏—Ç–µ—Å—å –∑–∞–Ω–æ–≤–æ')
        await state.clear()

@router.callback_query(MakeApprointmentForm.confirmation)
async def confirm_appointment(callback: CallbackQuery, state: FSMContext):
    if callback.data == '1':

        data = await state.get_data()

        window_id = data['window_id']

        user = UserRepository.get_user(int(data['user_id']))

        try:
            WindowRepository.update_window(int(window_id), data)
            window = WindowRepository.get_window(window_id)
            await callback.message.answer('''
–£—Å–ø–µ—à–Ω–æ, –ø—Ä–æ—Ü–µ–¥—É—Ä–∞ –±—É–¥–µ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –ø–æ –∞–¥—Ä–µ—Å—É: 
`–ú–æ—Å–∫–≤–∞, —É–ª–∏—Ü–∞ –†–æ—Å—Å–æ—à–∞–Ω—Å–∫–∞—è, –¥–æ–º 6, –ø–æ–¥—ä–µ–∑–¥ 4`
–î–æ–º–æ—Ñ–æ–Ω: 220, –≠—Ç–∞–∂: 8 –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: @svessin''', parse_mode=ParseMode.MARKDOWN)
            await callback.message.answer_location(55.59230848008093, 37.61215122188916)

            text = f'–û–∫–Ω–æ: {window.datetime_to_str(window.datetime)} –±—ã–ª–æ –∑–∞–Ω—è—Ç–æ: @{user.username} –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è: {window.correct_time}'
            for admin in settings.admins:
                await callback.bot.send_message(admin, text)

            await callback.message.delete()

        except:
            await state.clear()
            await callback.answer('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ')

    elif callback.data == '0':
        await callback.message.delete()
        await callback.message.answer('–ó–∞–ø–∏—Å—å –Ω–µ —Å–æ–∑–¥–∞–Ω–∞')

    await state.clear()